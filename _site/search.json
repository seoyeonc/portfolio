[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "This blog was generated to manage my blogs."
  },
  {
    "objectID": "2_kno.html",
    "href": "2_kno.html",
    "title": "Knowledge",
    "section": "",
    "text": "Date\n\n\nTitle\n\n\nAuthor\n\n\n\n\n\n\nApr 9, 2025\n\n\n[Knowledge] Definition\n\n\nSEOYEON CHOI\n\n\n\n\n\nNo matching items",
    "crumbs": [
      "Main_Blog",
      "**Statistics**",
      "Knowledge"
    ]
  },
  {
    "objectID": "posts/rwdrwe/2025-04-09-rwdrwe_figure.html",
    "href": "posts/rwdrwe/2025-04-09-rwdrwe_figure.html",
    "title": "[RWD/RWE] RWD Graph with R",
    "section": "",
    "text": "Import\n\nlibrary(ggplot2)\n\n\n\nData\n\ndata &lt;- data.frame(\n  Visit = c(\"Visit 2\", \"Visit 3\"),\n  MeanChange = c(-5.2, -7.8),\n  SD = c(1.1, 1.5)\n)\n\n\n\nFigure\n\ndata$ymin &lt;- data$MeanChange - data$SD\ndata$ymax &lt;- data$MeanChange\n\n\np &lt;- ggplot(data, aes(x = Visit, y = MeanChange)) +\n  geom_bar(stat = \"identity\", fill = \"grey60\", width = 0.6, color = \"black\") +\n  geom_errorbar(aes(ymin = ymin, ymax = ymax), width = 0.2, color = \"grey30\") +\n  labs(title = \"Mean Decrease with SD (Lower Bound)\",\n       y = \"Mean Decrease\", x = \"\") +\n  theme_minimal(base_family = \"sans\") +\n  theme(\n    panel.background = element_rect(fill = \"transparent\", color = NA),\n    plot.background = element_rect(fill = \"transparent\", color = NA),\n    panel.grid.major = element_line(color = \"grey80\"),\n    panel.grid.minor = element_blank(),\n    axis.text = element_text(color = \"grey30\"),\n    axis.title = element_text(color = \"grey30\"),\n    plot.title = element_text(color = \"grey30\", face = \"bold\", hjust = 0.5)\n  )\n\n\n\nGraph\n\np\n\n\n\n\n\n\n\n\n\n\nSave\n\n# ggsave(\"plot.png\", p, bg = \"transparent\", width = 6, height = 4, dpi = 300)\n\n\n\nReference\n[1] : Fixed Bsseline, Displayed Change.\n[2] : Mean values were plotted over time with error bars representing standard deviation to illustrate variability across groups."
  },
  {
    "objectID": "posts/kno/2025-04-09-definitions.html",
    "href": "posts/kno/2025-04-09-definitions.html",
    "title": "[Knowledge] Survival Analysis",
    "section": "",
    "text": "dd"
  },
  {
    "objectID": "posts/pro/2025-04-09-mixedmodel.html",
    "href": "posts/pro/2025-04-09-mixedmodel.html",
    "title": "[Program] Mixed model",
    "section": "",
    "text": "dd"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "SEOYEON CHOI",
    "section": "",
    "text": "Professional ExperienceEducationPublications\n\n\n\n(10/2022 - 5/2025) Nanum Space Corp.\n\nData Analystic Team / Statistician\n\n(10/2020 - 9/2022) Jeonbuk National University Hospital Center for Clinical Pharmacology\n\nClinical Statistics Team / Statistician\n\n\n\n\n\n(9/2021 - 8/2023) Jeonbuk National University, South Korea\n\nDepartment of Statistics / Master’s degree\n\n(3/2014 - 2/2018) Jeonbuk National University, South Korea\n\nDepartment of Statistics / Bachelor’s degree\n\n\n\n\n\nChoi, S. & Choi, G.(2025). Gode: graph Fourier transform based outlier detection using empirical Bayesian thresholding; \\textit{Journal of the Korean Statistical Society, 1-21\n\nkeywords: Outlier Detection, Non-Euclidean Data, Graph Fourier Transform, Bayesian Modelings\nhttps://link.springer.com/article/10.1007/s42952-024-00303-1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDate\n\n\nTitle\n\n\nAuthor\n\n\n\n\n\n\nApr 18, 2025\n\n\n[RWD/RWE] RWD Table with Python\n\n\nSEOYEON CHOI\n\n\n\n\nApr 9, 2025\n\n\n[Program] Mixed model\n\n\nSEOYEON CHOI\n\n\n\n\nApr 9, 2025\n\n\n[Randomzation] Randomization\n\n\nSEOYEON CHOI\n\n\n\n\nApr 9, 2025\n\n\n[Knowledge] Definition\n\n\nSEOYEON CHOI\n\n\n\n\nApr 9, 2025\n\n\n[PK/PD] PK Parameters\n\n\nSEOYEON CHOI\n\n\n\n\nApr 9, 2025\n\n\n[RWD/RWE] RWD Graph with R\n\n\nSEOYEON CHOI\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "2_pro.html",
    "href": "2_pro.html",
    "title": "Programs",
    "section": "",
    "text": "Date\n\n\nTitle\n\n\nAuthor\n\n\n\n\n\n\nApr 9, 2025\n\n\n[Program] Mixed model\n\n\nSEOYEON CHOI\n\n\n\n\n\nNo matching items",
    "crumbs": [
      "Main_Blog",
      "**Statistics**",
      "Programs"
    ]
  },
  {
    "objectID": "2_rwdrwe.html",
    "href": "2_rwdrwe.html",
    "title": "RWD/RWE",
    "section": "",
    "text": "Date\n\n\nTitle\n\n\nAuthor\n\n\n\n\n\n\nApr 18, 2025\n\n\n[RWD/RWE] RWD Table with Python\n\n\nSEOYEON CHOI\n\n\n\n\nApr 9, 2025\n\n\n[RWD/RWE] RWD Graph with R\n\n\nSEOYEON CHOI\n\n\n\n\n\nNo matching items",
    "crumbs": [
      "Main_Blog",
      "**Statistics**",
      "RWD/RWE"
    ]
  },
  {
    "objectID": "2_rand.html",
    "href": "2_rand.html",
    "title": "Randomization",
    "section": "",
    "text": "Date\n\n\nTitle\n\n\nAuthor\n\n\n\n\n\n\nApr 9, 2025\n\n\n[Randomzation] Randomization\n\n\nSEOYEON CHOI\n\n\n\n\n\nNo matching items",
    "crumbs": [
      "Main_Blog",
      "**Statistics**",
      "Randomization"
    ]
  },
  {
    "objectID": "posts/rand/2025-04-09-randomization.html",
    "href": "posts/rand/2025-04-09-randomization.html",
    "title": "[Randomzation] Randomization",
    "section": "",
    "text": "import random\n\ndef chunked_shuffle(base_list, repeat=4, seed=42):\n    random.seed(seed)\n    result = []\n\n    for _ in range(repeat):\n        chunk = base_list.copy()\n        random.shuffle(chunk)\n        result.extend(chunk)\n\n    return result\n\nbase = [1, 2, 3, 4, 5, 6]\nshuffled_list = chunked_shuffle(base, repeat=4, seed=20252025)\nbinary_list = [1 if x &lt;= 3 else 2 for x in shuffled_list]\nsubject_ids = [f\"S{i+1:03}\" for i in range(len(shuffled_list))]\n\nsequence_list = ['T-R' if b == 1 else 'R-T' for b in binary_list]\n\nsubject_ids = [f\"S{i+1:03}\" for i in range(len(shuffled_list))]\n\ndf = pd.DataFrame({\n    'Subject_ID': subject_ids,\n    'Treatment': binary_list,\n    'Sequence': sequence_list\n})\n\nprint(df)\n\n   Subject_ID  Treatment Sequence\n0        S001          1      T-R\n1        S002          2      R-T\n2        S003          2      R-T\n3        S004          2      R-T\n4        S005          1      T-R\n5        S006          1      T-R\n6        S007          2      R-T\n7        S008          1      T-R\n8        S009          1      T-R\n9        S010          2      R-T\n10       S011          2      R-T\n11       S012          1      T-R\n12       S013          1      T-R\n13       S014          2      R-T\n14       S015          2      R-T\n15       S016          1      T-R\n16       S017          2      R-T\n17       S018          1      T-R\n18       S019          2      R-T\n19       S020          1      T-R\n20       S021          1      T-R\n21       S022          1      T-R\n22       S023          2      R-T\n23       S024          2      R-T\n\n\n\n\n\n잠재적 교란요인을 줄이기 위해 층(strate)을 만든 후 각 층 내에서 간단한 무작위화 수행\n\nimport random\nimport pandas as pd\n\nrandom.seed(42)\nn_per_stratum = 6\nstrata_sex = ['Male', 'Female']\nstrata_bmi = ['Underweight', 'Normal', 'Overweight']\ngroups = ['Treatment', 'Control']\n\nstratum_combinations = [(sex, bmi) for sex in strata_sex for bmi in strata_bmi]\n\nsubject_data = []\n\nsubject_id = 1\nfor sex, bmi in stratum_combinations:\n    stratum_subjects = [f\"S{subject_id + i:03}\" for i in range(n_per_stratum)]\n    subject_id += n_per_stratum\n    \n    group_assignments = (groups * (n_per_stratum // 2))[:n_per_stratum]\n    random.shuffle(group_assignments)\n    \n    for sid, group in zip(stratum_subjects, group_assignments):\n        subject_data.append({\n            'Subject_ID': sid,\n            'Sex': sex,\n            'BMI': bmi,\n            'Group': group\n        })\n\ndf = pd.DataFrame(subject_data)\nprint(df)\n\n   Subject_ID     Sex          BMI      Group\n0        S001    Male  Underweight    Control\n1        S002    Male  Underweight    Control\n2        S003    Male  Underweight  Treatment\n3        S004    Male  Underweight  Treatment\n4        S005    Male  Underweight  Treatment\n5        S006    Male  Underweight    Control\n6        S007    Male       Normal    Control\n7        S008    Male       Normal  Treatment\n8        S009    Male       Normal  Treatment\n9        S010    Male       Normal  Treatment\n10       S011    Male       Normal    Control\n11       S012    Male       Normal    Control\n12       S013    Male   Overweight    Control\n13       S014    Male   Overweight    Control\n14       S015    Male   Overweight  Treatment\n15       S016    Male   Overweight  Treatment\n16       S017    Male   Overweight  Treatment\n17       S018    Male   Overweight    Control\n18       S019  Female  Underweight    Control\n19       S020  Female  Underweight  Treatment\n20       S021  Female  Underweight    Control\n21       S022  Female  Underweight  Treatment\n22       S023  Female  Underweight    Control\n23       S024  Female  Underweight  Treatment\n24       S025  Female       Normal    Control\n25       S026  Female       Normal    Control\n26       S027  Female       Normal  Treatment\n27       S028  Female       Normal  Treatment\n28       S029  Female       Normal    Control\n29       S030  Female       Normal  Treatment\n30       S031  Female   Overweight  Treatment\n31       S032  Female   Overweight    Control\n32       S033  Female   Overweight  Treatment\n33       S034  Female   Overweight    Control\n34       S035  Female   Overweight  Treatment\n35       S036  Female   Overweight    Control"
  },
  {
    "objectID": "posts/rand/2025-04-09-randomization.html#block-randomization",
    "href": "posts/rand/2025-04-09-randomization.html#block-randomization",
    "title": "[Randomzation] Randomization",
    "section": "",
    "text": "import random\n\ndef chunked_shuffle(base_list, repeat=4, seed=42):\n    random.seed(seed)\n    result = []\n\n    for _ in range(repeat):\n        chunk = base_list.copy()\n        random.shuffle(chunk)\n        result.extend(chunk)\n\n    return result\n\nbase = [1, 2, 3, 4, 5, 6]\nshuffled_list = chunked_shuffle(base, repeat=4, seed=20252025)\nbinary_list = [1 if x &lt;= 3 else 2 for x in shuffled_list]\nsubject_ids = [f\"S{i+1:03}\" for i in range(len(shuffled_list))]\n\nsequence_list = ['T-R' if b == 1 else 'R-T' for b in binary_list]\n\nsubject_ids = [f\"S{i+1:03}\" for i in range(len(shuffled_list))]\n\ndf = pd.DataFrame({\n    'Subject_ID': subject_ids,\n    'Treatment': binary_list,\n    'Sequence': sequence_list\n})\n\nprint(df)\n\n   Subject_ID  Treatment Sequence\n0        S001          1      T-R\n1        S002          2      R-T\n2        S003          2      R-T\n3        S004          2      R-T\n4        S005          1      T-R\n5        S006          1      T-R\n6        S007          2      R-T\n7        S008          1      T-R\n8        S009          1      T-R\n9        S010          2      R-T\n10       S011          2      R-T\n11       S012          1      T-R\n12       S013          1      T-R\n13       S014          2      R-T\n14       S015          2      R-T\n15       S016          1      T-R\n16       S017          2      R-T\n17       S018          1      T-R\n18       S019          2      R-T\n19       S020          1      T-R\n20       S021          1      T-R\n21       S022          1      T-R\n22       S023          2      R-T\n23       S024          2      R-T"
  },
  {
    "objectID": "posts/rand/2025-04-09-randomization.html#stratified-randomization",
    "href": "posts/rand/2025-04-09-randomization.html#stratified-randomization",
    "title": "[Randomzation] Randomization",
    "section": "",
    "text": "잠재적 교란요인을 줄이기 위해 층(strate)을 만든 후 각 층 내에서 간단한 무작위화 수행\n\nimport random\nimport pandas as pd\n\nrandom.seed(42)\nn_per_stratum = 6\nstrata_sex = ['Male', 'Female']\nstrata_bmi = ['Underweight', 'Normal', 'Overweight']\ngroups = ['Treatment', 'Control']\n\nstratum_combinations = [(sex, bmi) for sex in strata_sex for bmi in strata_bmi]\n\nsubject_data = []\n\nsubject_id = 1\nfor sex, bmi in stratum_combinations:\n    stratum_subjects = [f\"S{subject_id + i:03}\" for i in range(n_per_stratum)]\n    subject_id += n_per_stratum\n    \n    group_assignments = (groups * (n_per_stratum // 2))[:n_per_stratum]\n    random.shuffle(group_assignments)\n    \n    for sid, group in zip(stratum_subjects, group_assignments):\n        subject_data.append({\n            'Subject_ID': sid,\n            'Sex': sex,\n            'BMI': bmi,\n            'Group': group\n        })\n\ndf = pd.DataFrame(subject_data)\nprint(df)\n\n   Subject_ID     Sex          BMI      Group\n0        S001    Male  Underweight    Control\n1        S002    Male  Underweight    Control\n2        S003    Male  Underweight  Treatment\n3        S004    Male  Underweight  Treatment\n4        S005    Male  Underweight  Treatment\n5        S006    Male  Underweight    Control\n6        S007    Male       Normal    Control\n7        S008    Male       Normal  Treatment\n8        S009    Male       Normal  Treatment\n9        S010    Male       Normal  Treatment\n10       S011    Male       Normal    Control\n11       S012    Male       Normal    Control\n12       S013    Male   Overweight    Control\n13       S014    Male   Overweight    Control\n14       S015    Male   Overweight  Treatment\n15       S016    Male   Overweight  Treatment\n16       S017    Male   Overweight  Treatment\n17       S018    Male   Overweight    Control\n18       S019  Female  Underweight    Control\n19       S020  Female  Underweight  Treatment\n20       S021  Female  Underweight    Control\n21       S022  Female  Underweight  Treatment\n22       S023  Female  Underweight    Control\n23       S024  Female  Underweight  Treatment\n24       S025  Female       Normal    Control\n25       S026  Female       Normal    Control\n26       S027  Female       Normal  Treatment\n27       S028  Female       Normal  Treatment\n28       S029  Female       Normal    Control\n29       S030  Female       Normal  Treatment\n30       S031  Female   Overweight  Treatment\n31       S032  Female   Overweight    Control\n32       S033  Female   Overweight  Treatment\n33       S034  Female   Overweight    Control\n34       S035  Female   Overweight  Treatment\n35       S036  Female   Overweight    Control"
  },
  {
    "objectID": "posts/pkpd/2025-04-09-pkparameters.html",
    "href": "posts/pkpd/2025-04-09-pkparameters.html",
    "title": "[PK/PD] PK Table and Figure",
    "section": "",
    "text": "Data_Table\n\nset.seed(1212)\nn &lt;- 24\ncompounded &lt;- rlnorm(n, meanlog = log(100), sdlog = 0.1)\ngeneric    &lt;- rlnorm(n, meanlog = log(95),  sdlog = 0.1)\n\n\nlog_comp &lt;- log(compounded)\nlog_gen  &lt;- log(generic)\n\n\nmean_diff &lt;- mean(log_gen) - mean(log_comp)\nse_diff &lt;- sqrt(var(log_gen)/n + var(log_comp)/n)\n\n\ngmr &lt;- exp(mean_diff)\n\n\n\n90% CI\n\n(z = 1.645 for two-sided 90% CI)\n\n\nz &lt;- 1.645\nci_lower &lt;- exp(mean_diff - z * se_diff)\nci_upper &lt;- exp(mean_diff + z * se_diff)\n\n\ndiff_raw &lt;- mean(generic) - mean(compounded)\n\n\n\nResult\n\ncat(\"GMR:\", round(gmr, 2), \"\\n\")\ncat(\"90% CI:\", round(ci_lower, 2), \"~\", round(ci_upper, 2), \"\\n\")\ncat(\"Difference (raw scale):\", round(diff_raw, 2), \"\\n\")\ncat(\"SE (log scale):\", round(se_diff, 4), \"\\n\")\n\nGMR: 0.93 \n90% CI: 0.88 ~ 0.97 \nDifference (raw scale): -7.56 \nSE (log scale): 0.0311 \n\n\n\n\nData_Figure\n\nlibrary(dplyr)\nlibrary(ggplot2)\n\n\nset.seed(12123)\n\nn_subjects &lt;- 10\ntime_points &lt;- c(0.5, 1, 2, 4, 6, 8)\n\nsubjects &lt;- 1:n_subjects\nseq_A &lt;- sample(subjects, 5) \nseq_B &lt;- setdiff(subjects, seq_A) \n\ngenerate_subject_data &lt;- function(id, seq_group) {\n  if (seq_group == \"A\") {\n    data.frame(\n      subject_id = id,\n      period = rep(c(1, 2), each = length(time_points)),\n      treatment = rep(c(\"Compounded\", \"Generic\"), each = length(time_points)),\n      time = rep(time_points, times = 2)\n    )\n  } else {\n    data.frame(\n      subject_id = id,\n      period = rep(c(1, 2), each = length(time_points)),\n      treatment = rep(c(\"Generic\", \"Compounded\"), each = length(time_points)),\n      time = rep(time_points, times = 2)\n    )\n  }\n}\n\npk_df &lt;- do.call(rbind, lapply(seq_A, function(id) generate_subject_data(id, \"A\")))\npk_df &lt;- rbind(pk_df, do.call(rbind, lapply(seq_B, function(id) generate_subject_data(id, \"B\"))))\n\npk_df$conc &lt;- with(pk_df, rlnorm(nrow(pk_df),\n                                 meanlog = ifelse(treatment == \"Compounded\",\n                                                  log(50 - 5 * time),\n                                                  log(48 - 5 * time)),\n                                 sdlog = 0.2))\n\n\noptions(repr.plot.width = 10, repr.plot.height = 6)\n\n\np &lt;- ggplot(pk_df %&gt;% filter(subject_id == 1), \n       aes(x = time, y = conc, color = treatment)) +\n  geom_line(alpha = 0.8, linewidth = 1.2) +\n  geom_point(size = 3) +\n  labs(title = \"Spaghetti Plot of PK Profile (Subject 1)\",\n       x = \"Time (hr)\", y = \"Concentration (ng/mL)\", color = \"Treatment\") +\n  theme_minimal() +\n  theme(\n    legend.position = c(0.85, 0.9),\n    legend.background = element_rect(fill = \"white\", color = \"gray80\"),\n    legend.title = element_text(size = 10),\n    legend.text = element_text(size = 9)\n  )\n\n\np\n\n\n\n\n\n\n\n\n\n# ggsave(\"subject1_pk_plot.png\", plot = p, width = 10, height = 6, dpi = 300)\n\n\noptions(repr.plot.width = 8, repr.plot.height = 8)\n\n\ncompute_auc &lt;- function(time, conc) {\n  sum(diff(time) * (head(conc, -1) + tail(conc, -1)) / 2)\n}\n\nauc_df &lt;- pk_df %&gt;%\n  group_by(subject_id, period, treatment) %&gt;%\n  summarise(\n    AUC = compute_auc(time, conc),\n    .groups = \"drop\"\n  ) %&gt;%\n  mutate(log_AUC = log(AUC))\n\n\np &lt;- ggplot(auc_df, aes(x = treatment, y = log_AUC, fill = treatment)) +\n  geom_boxplot(alpha = 0.7) +\n  labs(title = \"Log-transformed AUC by Treatment\",\n       x = \"Treatment\", y = \"log(AUC)\") +\n  theme_minimal() +\n  theme(legend.position = \"none\")\n\n\np\n\n\n\n\n\n\n\n\n\n# ggsave(\"auc_plot.png\", plot = p, width = 8, height = 8, dpi = 300)\n\n\n\nReference\n[1] PK Table Example\n[2] AUC, Cmax Boxplot\n\n\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(tidyr)\n\n\ntwo_compartment_model &lt;- function(t, ka, ke, Vc, Vp, dose) {\n  Cp &lt;- dose / (Vc + Vp) * (ka / (ka - ke)) * (exp(-ke * t) - exp(-ka * t))\n  return(Cp)\n}\n\n\n# Time\nt &lt;- seq(0, 24, length.out = 20)\n\n\nn_subjects &lt;- 36\n\n\nset.seed(1212)\nseq &lt;- sample(rep(c(\"1\", \"2\"), each = 18))\n\nka1 &lt;- runif(n_subjects, 0.2, 0.8)\nke1 &lt;- runif(n_subjects, 0.05, 0.15)\nVc1 &lt;- runif(n_subjects, 8, 12)\nVp1 &lt;- runif(n_subjects, 3, 7)\ndose &lt;- 100\n\n\ndf1 &lt;- data.frame()\nfor (i in 1:n_subjects) {\n  Cp &lt;- two_compartment_model(t, ka1[i], ke1[i], Vc1[i], Vp1[i], dose)\n  temp &lt;- data.frame(\n    Subject = paste0(\"S\", sprintf(\"%02d\", i)),\n    Time = t,\n    Concentration = Cp,\n    Period = \"Period 1\",\n    Sequence = seq[i]\n  )\n  df1 &lt;- rbind(df1, temp)\n}\n\n\nka2 &lt;- runif(n_subjects, 0.2, 0.8)\nke2 &lt;- runif(n_subjects, 0.05, 0.15)\nVc2 &lt;- runif(n_subjects, 8, 12)\nVp2 &lt;- runif(n_subjects, 3, 7)\n\n\ndf2 &lt;- data.frame()\nfor (i in 1:n_subjects) {\n  Cp &lt;- two_compartment_model(t, ka2[i], ke2[i], Vc2[i], Vp2[i], dose)\n  temp &lt;- data.frame(\n    Subject = paste0(\"S\", sprintf(\"%02d\", i)),\n    Time = t,\n    Concentration = Cp,\n    Period = \"Period 2\",\n    Sequence = seq[i]\n  )\n  df2 &lt;- rbind(df2, temp)\n}\n\n\ndf_all &lt;- bind_rows(df1, df2)\n\n\noptions(repr.plot.width = 12, repr.plot.height = 8)\n\n\np &lt;- ggplot(df_all, aes(x = Time, y = Concentration, group = Subject)) +\n  geom_line(alpha = 0.6) +\n  facet_wrap(~ Period) +\n  labs(title = \"Pharmacokinetic Concentration Profile (36 Subjects)\",\n       x = \"Time (hours)\",\n       y = \"Concentration (mg/L)\") +\n  theme_minimal()\np\n\n\n\n\n\n\n\n\n\n# ggsave(\"conc.png\", plot = p, width = 12, height = 8, dpi = 300)"
  },
  {
    "objectID": "posts/rwdrwe/2025-04-18-rwdrwe_table.html",
    "href": "posts/rwdrwe/2025-04-18-rwdrwe_table.html",
    "title": "[RWD/RWE] RWD Table with Python",
    "section": "",
    "text": "Import\n\nimport pandas as pd\nimport numpy as np\nfrom scipy import stats\nimport statsmodels.formula.api as smf\n\n\n\nData\n\nnp.random.seed(1212)\nn = 30\nvisit1 = np.random.normal(100, 10, n)\nvisit2 = visit1 + np.random.normal(-5, 5, n)\nvisit3 = visit1 + np.random.normal(-10, 5, n)\n\n\ndf = pd.DataFrame({\n    'Subject': np.arange(1, n + 1),\n    'Visit1': visit1,\n    'Visit2': visit2,\n    'Visit3': visit3\n})\ndf['Change_V2_V1'] = df['Visit2'] - df['Visit1']\ndf['Change_V3_V1'] = df['Visit3'] - df['Visit1']\n\n\n\nFunction\n\nSame as Univariate of SAS\n\n\ndef summary_stats(data):\n    mean = np.mean(data)\n    sd = np.std(data, ddof=1)\n    se = stats.sem(data)\n    ci_low, ci_high = stats.t.interval(0.95, len(data)-1, loc=mean, scale=se)\n    return round(mean,2), round(sd,2), round(se,2), len(data), f\"({round(ci_low,2)}, {round(ci_high,2)})\"\n\n\nvisit_summary = pd.DataFrame([summary_stats(df[col]) for col in ['Visit1', 'Visit2', 'Visit3']],\n                             columns=['Mean', 'SD', 'SE', 'N', '95% CI'],\n                             index=['Visit1', 'Visit2', 'Visit3'])\n\n\nvisit_summary\n\n\n\n\n\n\n\n\nMean\nSD\nSE\nN\n95% CI\n\n\n\n\nVisit1\n99.67\n7.91\n1.44\n30\n(96.72, 102.62)\n\n\nVisit2\n94.52\n9.08\n1.66\n30\n(91.13, 97.91)\n\n\nVisit3\n88.33\n9.74\n1.78\n30\n(84.69, 91.96)\n\n\n\n\n\n\n\n\nchange_summary = pd.DataFrame([summary_stats(df['Change_V2_V1']),\n                               summary_stats(df['Change_V3_V1'])],\n                              columns=['Mean', 'SD', 'SE', 'N', '95% CI'],\n                              index=['Visit2 - Visit1', 'Visit3 - Visit1'])\n\n\nchange_summary\n\n\n\n\n\n\n\n\nMean\nSD\nSE\nN\n95% CI\n\n\n\n\nVisit2 - Visit1\n-5.15\n4.81\n0.88\n30\n(-6.95, -3.36)\n\n\nVisit3 - Visit1\n-11.35\n5.22\n0.95\n30\n(-13.29, -9.4)\n\n\n\n\n\n\n\n\nComparision with SAS\n\nPROC TTEST DATA=mydata;\n  PAIRED Visit2*Visit1;\nRUN;\n\nchange_summary['Paired t-test p'] = [round(stats.ttest_rel(df['Visit2'], df['Visit1']).pvalue, 4),\n                                     round(stats.ttest_rel(df['Visit3'], df['Visit1']).pvalue, 4)]\n\n\nchange_summary\n\n\n\n\n\n\n\n\nMean\nSD\nSE\nN\n95% CI\nPaired t-test p\n\n\n\n\nVisit2 - Visit1\n-5.15\n4.81\n0.88\n30\n(-6.95, -3.36)\n0.0\n\n\nVisit3 - Visit1\n-11.35\n5.22\n0.95\n30\n(-13.29, -9.4)\n0.0\n\n\n\n\n\n\n\nPROC TTEST DATA=mydata H0=0;\n  VAR change_value;\nRUN;\n\nchange_summary['One-sample t-test p'] = [round(stats.ttest_1samp(df['Change_V2_V1'], 0).pvalue, 4),\n                                         round(stats.ttest_1samp(df['Change_V3_V1'], 0).pvalue, 4)]\n\n\nchange_summary\n\n\n\n\n\n\n\n\nMean\nSD\nSE\nN\n95% CI\nPaired t-test p\nOne-sample t-test p\n\n\n\n\nVisit2 - Visit1\n-5.15\n4.81\n0.88\n30\n(-6.95, -3.36)\n0.0\n0.0\n\n\nVisit3 - Visit1\n-11.35\n5.22\n0.95\n30\n(-13.29, -9.4)\n0.0\n0.0\n\n\n\n\n\n\n\n\ndf_long = pd.melt(df, id_vars='Subject', value_vars=['Visit1', 'Visit2', 'Visit3'],\n                  var_name='Visit', value_name='Score')\n\n\ndf_long\n\n\n\n\n\n\n\n\nSubject\nVisit\nScore\n\n\n\n\n0\n1\nVisit1\n107.373521\n\n\n1\n2\nVisit1\n93.827029\n\n\n2\n3\nVisit1\n104.629304\n\n\n3\n4\nVisit1\n96.558097\n\n\n4\n5\nVisit1\n109.795635\n\n\n...\n...\n...\n...\n\n\n85\n26\nVisit3\n98.156855\n\n\n86\n27\nVisit3\n87.828647\n\n\n87\n28\nVisit3\n87.818170\n\n\n88\n29\nVisit3\n95.441655\n\n\n89\n30\nVisit3\n72.320460\n\n\n\n\n90 rows × 3 columns\n\n\n\n\ndf_long['Visit'] = df_long['Visit'].map({'Visit1': 1, 'Visit2': 2, 'Visit3': 3})\ndf_long\n\n\n\n\n\n\n\n\nSubject\nVisit\nScore\n\n\n\n\n0\n1\n1\n107.373521\n\n\n1\n2\n1\n93.827029\n\n\n2\n3\n1\n104.629304\n\n\n3\n4\n1\n96.558097\n\n\n4\n5\n1\n109.795635\n\n\n...\n...\n...\n...\n\n\n85\n26\n3\n98.156855\n\n\n86\n27\n3\n87.828647\n\n\n87\n28\n3\n87.818170\n\n\n88\n29\n3\n95.441655\n\n\n89\n30\n3\n72.320460\n\n\n\n\n90 rows × 3 columns\n\n\n\n\n\nMixed Model\n\nSame as Proc\n\n\nmodel = smf.mixedlm(\"Score ~ Visit\", df_long, groups=df_long[\"Subject\"]).fit()\nmodel\n\n&lt;statsmodels.regression.mixed_linear_model.MixedLMResultsWrapper at 0x7f9ddb066a90&gt;\n\n\n\nmodel.pvalues['Visit']\n\n9.562865213858627e-24\n\n\n\nmixed_model_pvalue = round(model.pvalues['Visit'], 4)\nmixed_model_pvalue\n\n0.0\n\n\n\nvisit_summary['Type'] = 'Visit'\nchange_summary['Type'] = 'Change'\n\n\nsummary_combined = pd.concat([visit_summary, change_summary])\nsummary_combined['Repeated Mixed Model p'] = ''\nsummary_combined.loc['Visit1', 'Repeated Mixed Model p'] = mixed_model_pvalue\n\n\nsummary_combined.reset_index(inplace=True)\nsummary_combined.rename(columns={'index': 'Comparison'}, inplace=True)\n\n\nsummary_combined\n\n\n\n\n\n\n\n\nComparison\nMean\nSD\nSE\nN\n95% CI\nType\nPaired t-test p\nOne-sample t-test p\nRepeated Mixed Model p\n\n\n\n\n0\nVisit1\n99.67\n7.91\n1.44\n30\n(96.72, 102.62)\nVisit\nNaN\nNaN\n0.0\n\n\n1\nVisit2\n94.52\n9.08\n1.66\n30\n(91.13, 97.91)\nVisit\nNaN\nNaN\n\n\n\n2\nVisit3\n88.33\n9.74\n1.78\n30\n(84.69, 91.96)\nVisit\nNaN\nNaN\n\n\n\n3\nVisit2 - Visit1\n-5.15\n4.81\n0.88\n30\n(-6.95, -3.36)\nChange\n0.0\n0.0\n\n\n\n4\nVisit3 - Visit1\n-11.35\n5.22\n0.95\n30\n(-13.29, -9.4)\nChange\n0.0\n0.0"
  },
  {
    "objectID": "2_pkpd.html",
    "href": "2_pkpd.html",
    "title": "PK/PD",
    "section": "",
    "text": "Date\n\n\nTitle\n\n\nAuthor\n\n\n\n\n\n\nApr 9, 2025\n\n\n[PK/PD] PK Parameters\n\n\nSEOYEON CHOI\n\n\n\n\n\nNo matching items",
    "crumbs": [
      "Main_Blog",
      "**Statistics**",
      "PK/PD"
    ]
  }
]